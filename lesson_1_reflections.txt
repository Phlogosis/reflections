How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Running diff on two versions of a file show the exact changes made.
  Being able to see the changes allows any mistakes to be easily found.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It makes searching for changes an insignificant task instead of a chore.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The amount of control given by manual commits makes each commit meaningful.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    git is designed ground up to support code, which is a concurrent system.

How can you use the commands git log and git diff to view the history of files?

    [git log] -- displays previous commits, their messages, and their IDs.
    [git diff] -- displays the changes between two commits.
    Overall, this enables you to see changes over time, step by step.

How might using version control make you more confident to make changes that
could break something?

    You can checkout a commit, make modifications, and if it doesn't work, you
  can re-checkout the commit, all without modifying the original.

Now that you have your workspace set up, what do you want to try using Git for?

    Programming games, creating websites, writing stories. D&D campaigns.

